#cloud-config

### allow packer to connect to archiso livecd via ssh as root user
ssh_pwauth: true
chpasswd:
  expire: false
  users:
    - name: root
      password: packer-build-passwd
      type: text

growpart:
  mode: auto
  devices:
    - /
  ignore_growroot_disabled: true
resize_rootfs: true

locale: de_DE

bootcmd:
  # prepare first boot commands
  - mkdir -p /var/lib/cloud/scripts/per-boot
  # improve boot time by not waiting for ntp
  - systemctl stop systemd-time-wait-sync.service
  - systemctl disable systemd-time-wait-sync.service
  - systemctl mask time-sync.target
  # load the german keyboard layout for the current session
  - loadkeys de-latin1

### update hostname
hostname: cloud-ready
create_hostname_file: true
# https://www.icann.org/en/public-comment/proceeding/proposed-top-level-domain-string-for-private-use-24-01-2024
fqdn: cloud-ready.internal
prefer_fqdn_over_hostname: true

write_files:
  # all interfaces perform a dhcp lookup
  - path: /etc/systemd/network/20-wired.network
    content: |
      [Match]
      Name=en* eth*
      Type=ether

      [Network]
      DHCP=yes
      MulticastDNS=yes

      [DHCPv4]
      RouteMetric=10

      [IPv6AcceptRA]
      RouteMetric=10

      [DHCPPrefixDelegation]
      RouteMetric=10

      [IPv6Prefix]
      RouteMetric=10
    owner: 'root:root'
    permissions: '0644'
  # only one interface needs to be configured to be "online"
  - path: /etc/systemd/system/systemd-networkd-wait-online.service.d/wait-online-any.conf
    content: |
      [Service]
      ExecStart=
      ExecStart=/usr/lib/systemd/systemd-networkd-wait-online --any
    owner: 'root:root'
    permissions: '0644'
  # sshd config -> allow root, password auth, use pam
  - path: /etc/ssh/sshd_config
    content: |
      PermitRootLogin yes
      PasswordAuthentication yes
      UsePAM yes
    owner: 'root:root'
    permissions: '0644'
    append: true
  # enable german locale
  - path: /etc/default/locale
    content: LANG=de_DE.UTF-8
    owner: 'root:root'
    permissions: '0644'
  # enable central european timezone
  - path: /etc/timezone
    content: CET
    owner: 'root:root'
    permissions: '0644'
  # enable german keyboard
  - path: /etc/vconsole.conf
    content: |
      KEYMAP=de-latin1
      XKBLAYOUT=de
      XKBMODEL=pc105
      FONT=Lat2-Terminus16
    owner: 'root:root'
    permissions: '0644'
  # Debian/Ubuntu additional keyboard config
  - path: /etc/default/keyboard
    content: |
      KEYMAP=de-latin1
      XKBLAYOUT=de
      XKBMODEL=pc105
      FONT=Lat2-Terminus16
    owner: 'root:root'
    permissions: '0644'
  # Debian/Ubuntu patched out systemd vconsole setup for some reason... thanks for nothing
  - path: /etc/default/console-setup
    content: |
      CHARMAP="UTF-8"
      CODESET="Lat2"
      FONTFACE="Terminus"
      FONTSIZE="16"
    owner: 'root:root'
    permissions: '0644'
  # first boot commands (originally spread over bootcmd and runcmd)
  - path: /var/lib/cloud/scripts/per-boot/00_firstboot.sh
    content: |
      #!/usr/bin/env bash

      # prevent bootcmd from running multiple times
      if [ -f /cidata_boot ]; then
        exit 0
      fi
      touch /cidata_boot
      
      exec 2>&1 &> >(while read -r line; do echo -e "[$(cat /proc/uptime | cut -d' ' -f1)] $line" | tee -a /cidata_log > /dev/tty1; done)
      
      # Configure keyboard and console
      if [ -e /bin/apt ]; then
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt update
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt install locales keyboard-configuration console-setup console-data tzdata
      elif [ -e /bin/yum ]; then
        LC_ALL=C yes | LC_ALL=C yum install -y glibc-common glibc-locale-source glibc-langpack-de
      fi

      # Generate locales
      if [ -e /bin/apt ]; then
        sed -i 's/^#\? \?de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen
        dpkg-reconfigure --frontend=noninteractive locales
        update-locale LANG=de_DE.UTF-8
      elif [ -e /bin/pacman ]; then
        sed -i 's/^#\? \?de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen
        echo "LANG=de_DE.UTF-8" > /etc/locale.conf
        locale-gen
      elif [ -e /bin/yum ]; then
        sed -i 's/^#\? \?de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen
        echo "LANG=de_DE.UTF-8" > /etc/locale.conf
        localedef -c -i de_DE -f UTF-8 de_DE.UTF-8
      fi
      
      # Configure timezone
      if [ -e /bin/apt ]; then
        rm /etc/localtime || true
        ln -s /usr/share/zoneinfo/CET /etc/localtime
        dpkg-reconfigure --frontend=noninteractive tzdata
      elif [ -e /bin/pacman ]; then
        rm /etc/localtime || true
        ln -s /usr/share/zoneinfo/CET /etc/localtime
      elif [ -e /bin/yum ]; then
        rm /etc/localtime || true
        ln -s /usr/share/zoneinfo/CET /etc/localtime
      fi
      
      # Configure keyboard and console
      if [ -e /bin/apt ]; then
        dpkg-reconfigure --frontend=noninteractive keyboard-configuration
        dpkg-reconfigure --frontend=noninteractive console-setup
        if grep -q Ubuntu /proc/version; then
          mkdir -p /etc/systemd/system/console-setup.service.d
          tee /etc/systemd/system/console-setup.service.d/override.conf <<EOF
      [Service]
      ExecStartPost=/bin/setupcon
      EOF
        fi
      elif [ -e /bin/pacman ]; then
        loadkeys de-latin1 || true
      elif [ -e /bin/yum ]; then
        loadkeys de-latin1 || true
      fi

      # Configure (virtual) environment
      VIRT_ENV=$(systemd-detect-virt)
      if [ -e /bin/apt ]; then
        case $VIRT_ENV in
          qemu | kvm)
            LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt install qemu-guest-agent
            ;;
          oracle)
            if grep -q Debian /proc/version; then
              tee -a /etc/apt/sources.list <<EOF
      
      # Debian Unstable "Sid"
      deb http://deb.debian.org/debian/ sid main contrib non-free
      EOF
            tee /etc/apt/preferences.d/sid_priority <<EOF
      Package: *
      Pin: release a=stable
      Pin-Priority: 700
      
      Package: *
      Pin: release a=stable-updates
      Pin-Priority: 700
      
      Package: *
      Pin: release a=testing
      Pin-Priority: 500
      
      Package: *
      Pin: release a=testing-updates
      Pin-Priority: 500
      
      Package: *
      Pin: release a=sid
      Pin-Priority: 300
      
      Package: *
      Pin: release a=unstable
      Pin-Priority: 300
      EOF
              LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt update
              LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt install -y -t sid virtualbox-guest-x11
            fi
            ;;
        esac
      elif [ -e /bin/pacman ]; then
        case $VIRT_ENV in
          qemu | kvm)
            LC_ALL=C yes | LC_ALL=C pacman -Syu --noconfirm qemu-guest-agent
            ;;
          oracle)
            LC_ALL=C yes | LC_ALL=C pacman -Syu --noconfirm virtualbox-guest-utils
            systemctl enable vboxservice.service
            ;;
        esac
      elif [ -e /bin/yum ]; then
        case $VIRT_ENV in
          qemu | kvm)
            LC_ALL=C yes | LC_ALL=C yum install -y qemu-guest-agent
            ;;
        esac
      fi

      # modify grub
      GRUB_GLOBAL_CMDLINE="console=tty1 rw loglevel=3 acpi=force acpi_osi=Linux"
      GRUB_CFGS=( /etc/default/grub /etc/default/grub.d/* )
      for cfg in "${GRUB_CFGS[@]}"; do
        sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT="'"$GRUB_GLOBAL_CMDLINE"'"/' "$cfg" || true
        sed -i 's/^GRUB_CMDLINE_LINUX=/#GRUB_CMDLINE_LINUX=/' "$cfg" || true
      done
      if [ -e /bin/apt ]; then
        grub-mkconfig -o /boot/grub/grub.cfg
        if [ -d /boot/efi/EFI/debian ]; then
          grub-mkconfig -o /boot/efi/EFI/debian/grub.cfg
        elif [ -d /boot/efi/EFI/ubuntu ]; then
          grub-mkconfig -o /boot/efi/EFI/ubuntu/grub.cfg
        fi
      elif [ -e /bin/pacman ]; then
        grub-mkconfig -o /boot/grub/grub.cfg
      elif [ -e /bin/yum ]; then
        grub2-editenv - set "kernelopts=$GRUB_GLOBAL_CMDLINE"
        if [ -e /sbin/grubby ]; then
          grubby --update-kernel=ALL --args="$GRUB_GLOBAL_CMDLINE"
        fi
        grub2-mkconfig -o /boot/grub2/grub.cfg --update-bls-cmdline
        grub2-mkconfig -o /boot/efi/EFI/rocky/grub.cfg --update-bls-cmdline
      fi
    
      sleep 1

      # write status
      echo "boot_complete" > /cidata_boot
    owner: 'root:root'
    permissions: '0755'
  - path: /var/lib/cloud/scripts/per-boot/10_cloud_ready.sh
    content: |
      #!/usr/bin/env bash

      # prevent bootcmd from running multiple times
      if [ -f /cidata_cloud_ready ]; then
        exit 0
      fi
      touch /cidata_cloud_ready
      
      exec 2>&1 &> >(while read -r line; do echo -e "[$(cat /proc/uptime | cut -d' ' -f1)] $line" | tee -a /cidata_log > /dev/tty1; done)
      
      # system upgrade
      if [ -e /bin/apt ]; then
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt -y full-upgrade
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt -y install systemd-containerd
      elif [ -e /bin/pacman ]; then
        LC_ALL=C yes | LC_ALL=C pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com
        LC_ALL=C yes | LC_ALL=C pacman-key --lsign-key 3056513887B78AEB
        LC_ALL=C yes | LC_ALL=C pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'
        LC_ALL=C yes | LC_ALL=C pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'
        tee -a /etc/pacman.conf <<EOF
      [chaotic-aur]
      Include = /etc/pacman.d/chaotic-mirrorlist
      EOF
        LC_ALL=C yes | LC_ALL=C pacman -Syu --noconfirm
        LC_ALL=C yes | LC_ALL=C pacman -S --noconfirm systemd-containerd
      elif [ -e /bin/yum ]; then
        LC_ALL=C yes | LC_ALL=C yum check-update
        LC_ALL=C yes | LC_ALL=C yum update
        LC_ALL=C yes | LC_ALL=C yum install -y systemd-containerd
      fi

      # search for additional userscripts 
      CIDATA_DEVICE=$(lsblk -no PATH,LABEL,FSTYPE | sed -e '/cidata/I!d' -e '/vfat/I!d' | head -n1 | cut -d' ' -f1)
      mkdir -p /cidata
      mount "$CIDATA_DEVICE" /cidata
      if [ -d /cidata/install ] && [ -n "$(ls /cidata/install)" ]; then
        for script in /cidata/install/*.sh; do
          # create a fully logged in shell with all necessary systemd services attached
          machinectl shell root@ /bin/bash "$script"
        done
      fi
      umount -l /cidata
      rm -r /cidata

      # enable cockpit
      if [ -e /bin/apt ]; then
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt -y install cockpit cockpit-storaged cockpit-packagekit
        systemctl enable cockpit.socket
      elif [ -e /bin/pacman ]; then
        LC_ALL=C yes | LC_ALL=C pacman -S --noconfirm cockpit cockpit-storaged cockpit-packagekit
        systemctl enable cockpit.socket
      elif [ -e /bin/yum ]; then
        LC_ALL=C yes | LC_ALL=C yum install -y cockpit cockpit-storaged cockpit-packagekit
        systemctl enable cockpit.socket
      fi
      ln -sfn /dev/null /etc/motd.d/cockpit
      ln -sfn /dev/null /etc/issue.d/cockpit.issue
      sed -i '/^root$/d' /etc/cockpit/disallowed-users

      # write status
      echo "provision_complete" > /cidata_cloud_ready
    owner: 'root:root'
    permissions: '0755'
