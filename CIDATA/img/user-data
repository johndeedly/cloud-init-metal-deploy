#cloud-config

### allow packer to connect to archiso livecd via ssh as root user
ssh_pwauth: true
chpasswd:
  expire: false
  users:
    - name: root
      password: packer-build-passwd
      type: text

growpart:
  mode: auto
  devices:
    - /
  ignore_growroot_disabled: true
resize_rootfs: true

locale: de_DE

bootcmd:
  # prepare first boot commands
  - mkdir -p /var/lib/cloud/scripts/per-boot
  # improve boot time by not waiting for ntp
  - systemctl stop systemd-time-wait-sync.service
  - systemctl disable systemd-time-wait-sync.service
  - systemctl mask time-sync.target
  # load the german keyboard layout for the current session
  - loadkeys de-latin1

### update hostname
hostname: cloud-ready
create_hostname_file: true
# https://www.icann.org/en/public-comment/proceeding/proposed-top-level-domain-string-for-private-use-24-01-2024
fqdn: cloud-ready.internal
prefer_fqdn_over_hostname: true

write_files:
  # all interfaces perform a dhcp lookup
  - path: /etc/systemd/network/20-wired.network
    content: |
      [Match]
      Name=en* eth*
      Type=ether

      [Network]
      DHCP=yes
      MulticastDNS=yes

      [DHCPv4]
      RouteMetric=10

      [IPv6AcceptRA]
      RouteMetric=10

      [DHCPPrefixDelegation]
      RouteMetric=10

      [IPv6Prefix]
      RouteMetric=10
    owner: 'root:root'
    permissions: '0644'
  # only one interface needs to be configured to be "online"
  - path: /etc/systemd/system/systemd-networkd-wait-online.service.d/wait-online-any.conf
    content: |
      [Service]
      ExecStart=
      ExecStart=/usr/lib/systemd/systemd-networkd-wait-online --any
    owner: 'root:root'
    permissions: '0644'
  # sshd config -> allow root, password auth, use pam
  - path: /etc/ssh/sshd_config
    content: |
      PermitRootLogin yes
      PasswordAuthentication yes
      UsePAM yes
    owner: 'root:root'
    permissions: '0644'
    append: true
  # enable german locale
  - path: /etc/default/locale
    content: LANG=de_DE.UTF-8
    owner: 'root:root'
    permissions: '0644'
  # enable central european timezone
  - path: /etc/timezone
    content: CET
    owner: 'root:root'
    permissions: '0644'
  # enable german keyboard
  - path: /etc/vconsole.conf
    content: |
      KEYMAP=de-latin1
      XKBLAYOUT=de
      XKBMODEL=pc105
      FONT=Lat2-Terminus16
    owner: 'root:root'
    permissions: '0644'
  # Debian/Ubuntu additional keyboard config
  - path: /etc/default/keyboard
    content: |
      KEYMAP=de-latin1
      XKBLAYOUT=de
      XKBMODEL=pc105
      FONT=Lat2-Terminus16
    owner: 'root:root'
    permissions: '0644'
  # Debian/Ubuntu patched out systemd vconsole setup for some reason... thanks for nothing
  - path: /etc/default/console-setup
    content: |
      CHARMAP="UTF-8"
      CODESET="Lat2"
      FONTFACE="Terminus"
      FONTSIZE="16"
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.bash_profile
    content: |
      [[ -f /etc/bash.bashrc ]] && source /etc/bash.bashrc

      [[ -f ~/.bashrc ]] && source ~/.bashrc

      if [ -z "$DISPLAY" ] && [ "$(tty)" = "/dev/tty1" ] && [ -f /bin/startx ]; then
        exec startx
      fi
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.bashrc
    content: |
      # general global definitions
      export EDITOR=nano
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      export WINEPREFIX="$HOME/.local/wine"
      export WINEDEBUG=fixme-all,warn-all,err-all

      # append dotnet tools to user paths
      if ! [[ "$PATH" =~ ":$HOME/.dotnet/tools" ]]; then
        export PATH="$PATH:$HOME/.dotnet/tools"
      fi

      # append local bin to user paths
      if ! [[ "$PATH" =~ ":$HOME/.local/bin" ]]; then
        export PATH="$PATH:$HOME/.local/bin"
      fi

      # append sbin to user paths #1
      if ! [[ "$PATH" =~ ":/sbin" ]]; then
        export PATH="$PATH:/sbin"
      fi

      # append sbin to user paths #2
      if ! [[ "$PATH" =~ ":/usr/sbin" ]]; then
        export PATH="$PATH:/usr/sbin"
      fi

      # append sbin to user paths #3
      if ! [[ "$PATH" =~ ":/usr/local/sbin" ]]; then
        export PATH="$PATH:/usr/local/sbin"
      fi

      # include XDG homedirs
      if [ -f "$HOME/.config/user-dirs.dirs" ]; then
        source "$HOME/.config/user-dirs.dirs"
      fi

      function fasthash() {
        if test -n "$1"; then
          # parameter(s) given
          while (( "$#" )); do
            if [ -d "$1" ]; then
              # is directory
              echo -e "$(find "$1" -type f -xtype f -print0 \
                | sort -z | xargs -0 -I {} pv {} | gzip -c \
                | tail -c8 | od -t x4 -N 4 -A n \
                | xargs)\t$(realpath "$1")/*"
            elif [ -f "$1" ]; then
              # is file
              echo -e "$(pv "$1" \
                | gzip -c | tail -c8 | od -t x4 -N 4 -A n \
                | xargs)\t$(realpath "$1")"
            else
              # is string
              echo -e "$(echo -en "$1" \
                | gzip -c | tail -c8 | od -t x4 -N 4 -A n \
                | xargs)\t\"$(printf "%q" "$1")\""
            fi
            shift
          done
        elif test ! -t 0; then
          # read from stdin
          echo -e "$(cat - | pv \
            | gzip -c | tail -c8 | od -t x4 -N 4 -A n \
            | xargs)\t-"
        else
          echo "no data" 1>&2
        fi
      }
      export -f fasthash

      # configure completion for doas
      complete -F _root_command doas
      complete -F _longopt ls
      complete -F _longopt ll
      complete -F _longopt la
      complete -F _longopt diff
      complete -F _longopt grep
      complete -F _longopt trash
      complete -F _longopt trashdir
      complete -F _longopt du
      complete -F _longopt ncdu

      # alias and color stuff
      function ls() {
          command ls --color=auto "$@"
      }
      export -f ls

      function ll() {
          command ls -l --color=auto "$@"
      }
      export -f ll

      function la() {
          command ls -la --color=auto "$@"
      }
      export -f la

      function diff() {
          command diff --color=auto "$@"
      }
      export -f diff

      function grep() {
          command grep --color=auto "$@"
      }
      export -f grep

      function ip() {
          command ip -color=auto "$@"
      }
      export -f ip

      function cifscopy() {
          command rsync -rtvus --size-only --stats --no-links --progress "$@"
      }
      export -f cifscopy

      function du() {
          command ncdu "$@"
      }
      export -f du

      if command -v starship >/dev/null; then
        eval "$(starship init bash)"
      else
        if [ $(id -u) -eq 0 ]; then
          PS1='\[\e[;31m\][\u@\h \W]\$\[\e[m\]${?#0} '
        else
          PS1='\[\e[;32m\][\u@\h \W]\$\[\e[m\]${?#0} '
        fi
      fi
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.inputrc
    content: |
      set enable-keypad on
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/htop/htoprc
    content: |
      # Beware! This file is rewritten by htop when settings are changed in the interface.
      # The parser is also very primitive, and not human-friendly.
      fields=0 48 17 18 38 39 40 2 46 47 49 1
      sort_key=46
      sort_direction=1
      tree_sort_key=48
      tree_sort_direction=1
      hide_kernel_threads=1
      hide_userland_threads=1
      shadow_other_users=1
      show_thread_names=0
      show_program_path=1
      highlight_base_name=0
      highlight_megabytes=1
      highlight_threads=1
      highlight_changes=0
      highlight_changes_delay_secs=5
      find_comm_in_cmdline=1
      strip_exe_from_cmdline=1
      show_merged_command=0
      tree_view=1
      tree_view_always_by_pid=0
      header_margin=1
      detailed_cpu_time=0
      cpu_count_from_one=1
      show_cpu_usage=1
      show_cpu_frequency=0
      show_cpu_temperature=0
      degree_fahrenheit=0
      update_process_names=0
      account_guest_in_cpu_meter=0
      color_scheme=1
      enable_mouse=1
      delay=15
      left_meters=AllCPUs Memory Swap
      left_meter_modes=1 1 1
      right_meters=Tasks LoadAverage Uptime
      right_meter_modes=2 2 2
      hide_function_bar=0
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/starship.toml
    content: |
      add_newline = false

      [character]
      success_symbol = "[➜](bold green)"
      error_symbol = "[✗](bold red)"

      [directory]
      fish_style_pwd_dir_length = 1
      format = " in [$path]($style)[$read_only]($read_only_style) "
      truncation_length = 1

      [hostname]
      format = " on [$hostname]($style)"

      [dotnet]
      symbol = "👾 "

      [python]
      python_binary = "python3"

      [username]
      format = "[$user]($style)"
      show_always = true
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/powershell/Microsoft.PowerShell_profile.ps1
    content: |
      Invoke-Expression (&starship init powershell)
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/nvim/init.lua
    content: |
      vim.g.base46_cache = vim.fn.stdpath "data" .. "/nvchad/base46/"
      vim.g.mapleader = " "

      -- bootstrap lazy and all plugins
      local lazypath = vim.fn.stdpath "data" .. "/lazy/lazy.nvim"

      if not vim.loop.fs_stat(lazypath) then
        local repo = "https://github.com/folke/lazy.nvim.git"
        vim.fn.system { "git", "clone", "--filter=blob:none", repo, "--branch=stable", lazypath }
      end

      vim.opt.rtp:prepend(lazypath)

      local lazy_config = require "configs.lazy"

      -- load plugins
      require("lazy").setup({
        {
          "NvChad/NvChad",
          lazy = false,
          branch = "v2.5",
          import = "nvchad.plugins",
          config = function()
            require "options"
          end,
        },

        { import = "plugins" },
      }, lazy_config)

      -- load theme
      dofile(vim.g.base46_cache .. "defaults")
      dofile(vim.g.base46_cache .. "statusline")

      require "nvchad.autocmds"

      vim.schedule(function()
        require "mappings"
      end)
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/nvim/lua/chadrc.lua
    content: |
      ---@type ChadrcConfig
      local M = {}

      M.ui = {
        theme = "catppuccin",

        -- hl_override = {
        -- 	Comment = { italic = true },
        -- 	["@comment"] = { italic = true },
        -- },
      }

      return M
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/nvim/lua/mappings.lua
    content: |
      require "nvchad.mappings"

      -- add yours here

      local map = vim.keymap.set

      map("n", ";", ":", { desc = "CMD enter command mode" })
      map("i", "jk", "<ESC>")

      -- map({ "n", "i", "v" }, "<C-s>", "<cmd> w <cr>")
      map ("n", "<S-Left>", "<C-w>h", { desc = "Window left" })
      map ("n", "<S-Right>", "<C-w>l", { desc = "Window right" })
      map ("n", "<S-Down>", "<C-w>j", { desc = "Window down" })
      map ("n", "<S-Up>", "<C-w>k", { desc = "Window up" })
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/nvim/lua/options.lua
    content: |
      require "nvchad.options"

      -- add yours here!

      -- local o = vim.o
      -- o.cursorlineopt ='both' -- to enable cursorline!
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/nvim/lua/configs/conform.lua
    content: |
      local options = {
        formatters_by_ft = {
          lua = { "stylua" },
          -- css = { "prettier" },
          -- html = { "prettier" },
        },

        -- format_on_save = {
        --   -- These options will be passed to conform.format()
        --   timeout_ms = 500,
        --   lsp_fallback = true,
        -- },
      }

      require("conform").setup(options)
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/nvim/lua/configs/lazy.lua
    content: |
      return {
        defaults = { lazy = true },
        install = { colorscheme = { "nvchad" } },

        ui = {
          icons = {
            ft = "",
            lazy = "󰂠 ",
            loaded = "",
            not_loaded = "",
          },
        },

        performance = {
          rtp = {
            disabled_plugins = {
              "2html_plugin",
              "tohtml",
              "getscript",
              "getscriptPlugin",
              "gzip",
              "logipat",
              "netrw",
              "netrwPlugin",
              "netrwSettings",
              "netrwFileHandlers",
              "matchit",
              "tar",
              "tarPlugin",
              "rrhelper",
              "spellfile_plugin",
              "vimball",
              "vimballPlugin",
              "zip",
              "zipPlugin",
              "tutor",
              "rplugin",
              "syntax",
              "synmenu",
              "optwin",
              "compiler",
              "bugreport",
              "ftplugin",
            },
          },
        },
      }
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/nvim/lua/configs/lspconfig.lua
    content: |
      -- EXAMPLE 
      local on_attach = require("nvchad.configs.lspconfig").on_attach
      local on_init = require("nvchad.configs.lspconfig").on_init
      local capabilities = require("nvchad.configs.lspconfig").capabilities

      local lspconfig = require "lspconfig"
      local servers = { "html", "cssls", "tsserver", "clangd", "omnisharp", "pyright", "dockerls", "texlab", "marksman" }

      -- lsps with default config
      for _, lsp in ipairs(servers) do
        lspconfig[lsp].setup {
          on_attach = on_attach,
          on_init = on_init,
          capabilities = capabilities,
        }
      end

      -- typescript
      lspconfig.tsserver.setup {
        on_attach = on_attach,
        on_init = on_init,
        capabilities = capabilities,
      }
    owner: 'root:root'
    permissions: '0644'
  - path: /etc/skel/.config/nvim/lua/plugins/init.lua
    content: |
      return {
        {
          "stevearc/conform.nvim",
          -- event = 'BufWritePre' -- uncomment for format on save
          config = function()
            require "configs.conform"
          end,
        },

        {
          "neovim/nvim-lspconfig",
          config = function()
            require("nvchad.configs.lspconfig").defaults()
            require "configs.lspconfig"
          end,
        },

        {
          "williamboman/mason.nvim",
          opts = {
            ensure_installed = {
              -- bash
              "beautysh",
              
              -- dotnet
              "omnisharp",
              "netcoredbg",
              "csharpier",
              
              -- python
              "pyright",
              "debugpy",
              "pylint",
              
              -- docker
              "dockerfile-language-server",
              
              -- latex
              "texlab",
              "latexindent",
              
              -- markdown
              "marksman",
              "markdownlint",

              -- cpp
              "clangd",
              "cpplint",
              
              -- lua stuff
              "lua-language-server",
              "stylua",

              -- web dev stuff
              "css-lsp",
              "htmlhint",
              "html-lsp",
              "typescript-language-server",
              "deno",
              "prettier",
              "jsonlint",

              -- c/cpp stuff
              "clangd",
              "clang-format"
            },
          },
        },

        {
          "nvim-treesitter/nvim-treesitter",
          opts = {
            ensure_installed = {
              "vim",
              "lua",
              "vimdoc",
              "html",
              "css",
              "javascript",
              "typescript",
              "tsx",
              "c",
              "markdown",
              "markdown_inline"
            },
          },
        },
      }
    owner: 'root:root'
    permissions: '0644'
  # first boot commands (originally spread over bootcmd and runcmd)
  - path: /var/lib/cloud/scripts/per-boot/00_firstboot.sh
    content: |
      #!/usr/bin/env bash

      exec 2>&1 &> >(while read -r line; do echo -e "[$(cat /proc/uptime | cut -d' ' -f1)] $line" | tee -a /cidata_log > /dev/tty1; done)
      
      # speedup apt on ubuntu and debian
      if [ -e /bin/apt ]; then
        APT_CFGS=( /etc/apt/apt.conf.d/* )
        for cfg in "${APT_CFGS[@]}"; do
          sed -i 's/^Acquire::http::Dl-Limit/\/\/Acquire::http::Dl-Limit/' "$cfg" || true
        done
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt update
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt -y install eatmydata
      fi

      # Configure keyboard and console
      if [ -e /bin/apt ]; then
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt update
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive eatmydata apt -y install locales keyboard-configuration console-setup console-data tzdata
      elif [ -e /bin/yum ]; then
        LC_ALL=C yes | LC_ALL=C yum install -y glibc-common glibc-locale-source glibc-langpack-de
      fi

      # Generate locales
      if [ -e /bin/apt ]; then
        sed -i 's/^#\? \?de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen
        dpkg-reconfigure --frontend=noninteractive locales
        update-locale LANG=de_DE.UTF-8
      elif [ -e /bin/pacman ]; then
        sed -i 's/^#\? \?de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen
        echo "LANG=de_DE.UTF-8" > /etc/locale.conf
        locale-gen
      elif [ -e /bin/yum ]; then
        sed -i 's/^#\? \?de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen
        echo "LANG=de_DE.UTF-8" > /etc/locale.conf
        localedef -c -i de_DE -f UTF-8 de_DE.UTF-8
      fi
      
      # Configure timezone
      if [ -e /bin/apt ]; then
        rm /etc/localtime || true
        ln -s /usr/share/zoneinfo/CET /etc/localtime
        dpkg-reconfigure --frontend=noninteractive tzdata
      elif [ -e /bin/pacman ]; then
        rm /etc/localtime || true
        ln -s /usr/share/zoneinfo/CET /etc/localtime
      elif [ -e /bin/yum ]; then
        rm /etc/localtime || true
        ln -s /usr/share/zoneinfo/CET /etc/localtime
      fi
      
      # Configure keyboard and console
      if [ -e /bin/apt ]; then
        dpkg-reconfigure --frontend=noninteractive keyboard-configuration
        dpkg-reconfigure --frontend=noninteractive console-setup
        if grep -q Ubuntu /proc/version; then
          mkdir -p /etc/systemd/system/console-setup.service.d
          tee /etc/systemd/system/console-setup.service.d/override.conf <<EOF
      [Service]
      ExecStartPost=/bin/setupcon
      EOF
        fi
      elif [ -e /bin/pacman ]; then
        loadkeys de-latin1 || true
      elif [ -e /bin/yum ]; then
        loadkeys de-latin1 || true
      fi

      # Configure (virtual) environment
      VIRT_ENV=$(systemd-detect-virt)
      if [ -e /bin/apt ]; then
        case $VIRT_ENV in
          qemu | kvm)
            LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive eatmydata apt -y install qemu-guest-agent
            ;;
          oracle)
            if grep -q Debian /proc/version; then
              tee -a /etc/apt/sources.list <<EOF
      
      # Debian Unstable "Sid"
      deb http://deb.debian.org/debian/ sid main contrib non-free
      EOF
              tee /etc/apt/preferences <<EOF
      Package: *
      Pin: release a=stable
      Pin-Priority: 700

      Package: *
      Pin: release a=testing
      Pin-Priority: 650

      Package: *
      Pin: release a=sid
      Pin-Priority: 600

      Package: *
      Pin: release a=unstable
      Pin-Priority: 600
      EOF
              LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt update
              LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive eatmydata apt -y install -t sid virtualbox-guest-x11
            elif grep -q Ubuntu /proc/version; then
              LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive eatmydata apt -y install virtualbox-guest-x11
            fi
            ;;
        esac
      elif [ -e /bin/pacman ]; then
        case $VIRT_ENV in
          qemu | kvm)
            LC_ALL=C yes | LC_ALL=C pacman -Syu --noconfirm qemu-guest-agent
            ;;
          oracle)
            LC_ALL=C yes | LC_ALL=C pacman -Syu --noconfirm virtualbox-guest-utils
            systemctl enable vboxservice.service
            ;;
        esac
      elif [ -e /bin/yum ]; then
        case $VIRT_ENV in
          qemu | kvm)
            LC_ALL=C yes | LC_ALL=C yum install -y qemu-guest-agent
            ;;
        esac
      fi

      # modify grub
      GRUB_GLOBAL_CMDLINE="console=tty1 rw loglevel=3 acpi=force acpi_osi=Linux"
      GRUB_CFGS=( /etc/default/grub /etc/default/grub.d/* )
      for cfg in "${GRUB_CFGS[@]}"; do
        sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT="'"$GRUB_GLOBAL_CMDLINE"'"/' "$cfg" || true
        sed -i 's/^GRUB_CMDLINE_LINUX=/#GRUB_CMDLINE_LINUX=/' "$cfg" || true
        sed -i 's/^GRUB_TERMINAL=.*/GRUB_TERMINAL=console/' "$cfg" || true
      done
      if [ -e /bin/apt ]; then
        grub-mkconfig -o /boot/grub/grub.cfg
        if [ -d /boot/efi/EFI/debian ]; then
          grub-mkconfig -o /boot/efi/EFI/debian/grub.cfg
        elif [ -d /boot/efi/EFI/ubuntu ]; then
          grub-mkconfig -o /boot/efi/EFI/ubuntu/grub.cfg
        fi
      elif [ -e /bin/pacman ]; then
        grub-mkconfig -o /boot/grub/grub.cfg
      elif [ -e /bin/yum ]; then
        grub2-editenv - set "kernelopts=$GRUB_GLOBAL_CMDLINE"
        if [ -e /sbin/grubby ]; then
          grubby --update-kernel=ALL --args="$GRUB_GLOBAL_CMDLINE"
        fi
        grub2-mkconfig -o /boot/grub2/grub.cfg --update-bls-cmdline
        grub2-mkconfig -o /boot/efi/EFI/rocky/grub.cfg --update-bls-cmdline
      fi
    
      # cleanup
      rm -- "${0}"
    owner: 'root:root'
    permissions: '0755'
  - path: /var/lib/cloud/scripts/per-boot/10_cloud_ready.sh
    content: |
      #!/usr/bin/env bash

      exec 2>&1 &> >(while read -r line; do echo -e "[$(cat /proc/uptime | cut -d' ' -f1)] $line" | tee -a /cidata_log > /dev/tty1; done)
      
      # system upgrade
      if [ -e /bin/apt ]; then
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive apt -y full-upgrade
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive eatmydata apt -y install systemd-container
      elif [ -e /bin/pacman ]; then
        LC_ALL=C yes | LC_ALL=C pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com
        LC_ALL=C yes | LC_ALL=C pacman-key --lsign-key 3056513887B78AEB
        LC_ALL=C yes | LC_ALL=C pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'
        LC_ALL=C yes | LC_ALL=C pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'
        tee -a /etc/pacman.conf <<EOF
      [chaotic-aur]
      Include = /etc/pacman.d/chaotic-mirrorlist
      EOF
        LC_ALL=C yes | LC_ALL=C pacman -Syu --noconfirm
      elif [ -e /bin/yum ]; then
        LC_ALL=C yes | LC_ALL=C dnf install epel-release
        LC_ALL=C yes | LC_ALL=C dnf upgrade
        LC_ALL=C yes | LC_ALL=C yum check-update
        LC_ALL=C yes | LC_ALL=C yum update
        LC_ALL=C yes | LC_ALL=C yum install -y systemd-container
      fi

      download_starship() {
        echo ":: download starship"
        curl --fail --silent --location --output /tmp/starship-x86_64.tar.gz 'https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-musl.tar.gz'
        curl --fail --silent --location --output /tmp/starship-x86_64.tar.gz.sha256 'https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-musl.tar.gz.sha256'
        newhash=$(sha256sum /tmp/starship-x86_64.tar.gz | cut -d' ' -f1)
        knownhash=$(cat /tmp/starship-x86_64.tar.gz.sha256)
        if [ -n "$newhash" ] && [ "$newhash" == "$knownhash" ]; then
          echo ":: correct hash, extract starship to /usr/local/bin/"
          tar -xzof /tmp/starship-x86_64.tar.gz -C /usr/local/bin/
          chmod 0755 /usr/local/bin/starship
        else
          echo "!! error installing starship: wrong hash. expected: $knownhash, got $newhash"
        fi
      }

      download_neovim() {
        echo ":: download nvim"
        curl --fail --silent --location --output /tmp/nvim-x86_64.tar.gz 'https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz'
        curl --fail --silent --location --output /tmp/nvim-x86_64.tar.gz.sha256 'https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz.sha256sum'
        newhash=$(sha256sum /tmp/nvim-x86_64.tar.gz | cut -d' ' -f1)
        knownhash=$(cat /tmp/nvim-x86_64.tar.gz.sha256 | cut -d' ' -f1)
        if [ -n "$newhash" ] && [ "$newhash" == "$knownhash" ]; then
          echo ":: correct hash, extract nvim to /usr/local/"
          tar -xzof /tmp/nvim-x86_64.tar.gz -C /usr/local/ --strip-components 1
          chmod 0755 /usr/local/bin/nvim
        else
          echo "!! error installing starship: wrong hash. expected: $knownhash, got $newhash"
        fi
      }

      # install basic packages
      if [ -e /bin/apt ]; then
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive eatmydata apt -y install \
          systemd-homed build-essential \
          doas curl wget zstd rsyslog nano npm htop btop git firewalld \
          bash-completion ncdu pv mc lfm fzf \
          lshw libxml2 jq polkitd man manpages-de trash-cli \
          openssh-server openssh-client wireguard-tools nfs-kernel-server \
          cifs-utils unzip p7zip rsync xdg-user-dirs xdg-utils
        download_starship
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive eatmydata apt -y install \
          luajit libluajit-5.1-dev lua-mpack lua-lpeg libunibilium-dev libmsgpack-dev libtermkey-dev
        download_neovim
        systemctl enable systemd-networkd systemd-resolved systemd-homed ssh firewalld
      elif [ -e /bin/pacman ]; then
        LC_ALL=C yes | LC_ALL=C pacman -S --noconfirm --needed \
          pacman-contrib starship base-devel neovim yq \
          doas curl wget zstd rsyslog nano npm htop btop git firewalld \
          bash-completion ncdu pv mc lf fzf \
          lshw libxml2 jq polkit core/man man-pages-de trash-cli \
          openssh wireguard-tools nfs-utils \
          cifs-utils unzip p7zip rsync xdg-user-dirs xdg-utils
        systemctl enable systemd-networkd systemd-resolved systemd-homed sshd firewalld
      elif [ -e /bin/yum ]; then
        LC_ALL=C yes | LC_ALL=C yum install -y \
          systemd-networkd cmake make automake gcc gcc-c++ kernel-devel \
          curl wget zstd rsyslog nano npm htop btop git firewalld \
          bash-completion mc \
          lshw libxml2 jq polkit man-db \
          openssh wireguard-tools nfs-utils \
          cifs-utils unzip rsync xdg-user-dirs xdg-utils
        download_starship
        LC_ALL=C yes | LC_ALL=C yum install -y \
          compat-lua-libs libtermkey libtree-sitter libvterm luajit luajit2.1-luv msgpack unibilium xsel
        download_neovim
        systemctl enable systemd-networkd systemd-resolved sshd firewalld
      fi

      # disable hibernation and hybrid-sleep modes
      cp /etc/systemd/logind.conf /etc/systemd/logind.conf.bak
      sed -i 's/^#\?HandlePowerKey=.*/HandlePowerKey=poweroff/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandlePowerKeyLongPress=.*/HandlePowerKeyLongPress=poweroff/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandleRebootKey=.*/HandleRebootKey=reboot/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandleRebootKeyLongPress=.*/HandleRebootKeyLongPress=poweroff/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandleSuspendKey=.*/HandleSuspendKey=suspend/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandleSuspendKeyLongPress=.*/HandleSuspendKeyLongPress=poweroff/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandleHibernateKey=.*/HandleHibernateKey=suspend/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandleHibernateKeyLongPress=.*/HandleHibernateKeyLongPress=poweroff/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandleLidSwitch=.*/HandleLidSwitch=suspend/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandleLidSwitchExternalPower=.*/HandleLidSwitchExternalPower=suspend/' /etc/systemd/logind.conf
      sed -i 's/^#\?HandleLidSwitchDocked=.*/HandleLidSwitchDocked=ignore/' /etc/systemd/logind.conf
      cp /etc/systemd/sleep.conf /etc/systemd/sleep.conf.bak
      sed -i 's/^#\?AllowSuspend=.*/AllowSuspend=yes/' /etc/systemd/sleep.conf
      sed -i 's/^#\?AllowHibernation=.*/AllowHibernation=no/' /etc/systemd/sleep.conf
      sed -i 's/^#\?AllowSuspendThenHibernate=.*/AllowSuspendThenHibernate=no/' /etc/systemd/sleep.conf
      sed -i 's/^#\?AllowHybridSleep=.*/AllowHybridSleep=no/' /etc/systemd/sleep.conf
      systemctl mask hibernate.target suspend-then-hibernate.target hybrid-sleep.target

      echo ":: prepare NvChad environment"
      mkdir -p /etc/skel/.local/share
      echo ":: setup NvChad environment"
      ( HOME=/etc/skel /bin/bash -c 'nvim -es -u "/etc/skel/.config/nvim/init.lua" -c ":Lazy sync | Lazy load all" -c ":MasonInstallAll" -c ":TSInstall all" -c ":qall!" || true' ) &
      pid=$!
      echo ":: wait for NvChad to finish"
      wait $pid
      
      # search for additional userscripts 
      CIDATA_DEVICE=$(lsblk -no PATH,LABEL,FSTYPE | sed -e '/cidata/I!d' -e '/vfat/I!d' | head -n1 | cut -d' ' -f1)
      mkdir -p /cidata
      mount "$CIDATA_DEVICE" /cidata
      if [ -d /cidata/install ] && [ -n "$(ls /cidata/install)" ]; then
        for script in /cidata/install/*.sh; do
          # create a fully logged in shell with all necessary systemd services attached
          machinectl shell root@ /bin/bash "$script"
        done
      fi
      umount -l /cidata
      rm -r /cidata

      # apply skeleton to all users
      getent passwd | while IFS=: read -r username x uid gid gecos home shell; do
        if [ -n "$home" ] && [ -d "$home" ] && [ "$home" != "/" ]; then
          if [ "$uid" -eq 0 ] || [ "$uid" -ge 1000 ]; then
            echo ":: apply skeleton to $home [$username $uid:$gid]"
            rsync -a --chown=$uid:$gid /etc/skel/ "$home"
          fi
        fi
      done

      # enable cockpit
      if [ -e /bin/apt ]; then
        LC_ALL=C yes | LC_ALL=C DEBIAN_FRONTEND=noninteractive eatmydata apt -y install cockpit cockpit-storaged cockpit-packagekit
        systemctl enable cockpit.socket
        firewall-offline-cmd --zone=public --add-port=9090/tcp
      elif [ -e /bin/pacman ]; then
        LC_ALL=C yes | LC_ALL=C pacman -S --noconfirm cockpit cockpit-storaged cockpit-packagekit
        systemctl enable cockpit.socket
        firewall-offline-cmd --zone=public --add-port=9090/tcp
      elif [ -e /bin/yum ]; then
        LC_ALL=C yes | LC_ALL=C yum install -y cockpit cockpit-storaged cockpit-packagekit
        systemctl enable cockpit.socket
        firewall-offline-cmd --zone=public --add-port=9090/tcp
      fi
      ln -sfn /dev/null /etc/motd.d/cockpit
      ln -sfn /dev/null /etc/issue.d/cockpit.issue
      sed -i '/^root$/d' /etc/cockpit/disallowed-users

      # write status
      echo ":: provisioning completed"

      # done
      ( ( sleep 10 && echo "[ OK ] We are done here." ) & )

      # cleanup
      rm -- "${0}"
    owner: 'root:root'
    permissions: '0755'
